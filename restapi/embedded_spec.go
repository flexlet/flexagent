// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Agent framwork to perform node operations\n",
    "title": "agent",
    "contact": {
      "name": "Wang Yaohui",
      "email": "yaohuiwang@outlook.com"
    },
    "version": "v1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/cronjobs": {
      "get": {
        "description": "List cronjobs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "listCronJobs",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Name filter",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List cronjobs succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CronJob"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "post": {
        "description": "Submit cronjobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "submitCronJobs",
        "parameters": [
          {
            "x-nullable": false,
            "description": "Cronjobs spec",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CronJobSpec"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submit cronjob succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CronJob"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/cronjobs/{id}": {
      "get": {
        "description": "Query cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "queryCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "put": {
        "description": "Update cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "updateCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Cronjob spec",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CronJobSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "delete": {
        "description": "Delete cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "deleteCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete cronjob succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/cronjobs/{id}/start": {
      "post": {
        "description": "Start cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "startCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Start cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/cronjobs/{id}/stop": {
      "post": {
        "description": "Stop cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "stopCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Stop cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/crypto/decrypt": {
      "post": {
        "description": "Decrypt data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "decrypt",
        "parameters": [
          {
            "description": "Data to decrypt",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data decrypted",
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/crypto/encrypt": {
      "post": {
        "description": "Encrypt data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "encrypt",
        "parameters": [
          {
            "description": "Data to encrypt",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data encrypted",
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/crypto/secret/decrypt": {
      "post": {
        "description": "Decrypt k8s secret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "secretDecrypt",
        "parameters": [
          {
            "description": "Secret to decrypt",
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret decrypted",
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/crypto/secret/encrypt": {
      "post": {
        "description": "Encrypt k8s secret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "secretEncrypt",
        "parameters": [
          {
            "description": "Secret to encrypt",
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret encrypted",
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/crypto/vault/{name}": {
      "get": {
        "description": "Query vault",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "queryVault",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-nullable": true,
            "description": "Key filter",
            "name": "keys",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get vault succeed",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "put": {
        "description": "Update vault",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "updateVault",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Vault data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update vault succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "post": {
        "description": "Create vault",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "createVault",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Vault data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create vault succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "delete": {
        "description": "Delete vault",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "deleteVault",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-nullable": true,
            "description": "Key filter",
            "name": "keys",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete vault succeed",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/crypto/vaults": {
      "get": {
        "description": "List vaults",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "listVaults",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Name filter",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get vaults succeed",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Health status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Agent"
        ],
        "operationId": "healthz",
        "responses": {
          "200": {
            "description": "Health status",
            "schema": {
              "$ref": "#/definitions/HealthStatus"
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "description": "List Jobs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "list",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Operation",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-nullable": true,
            "description": "Start time range begin",
            "name": "startTimeBegin",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-nullable": true,
            "description": "Start time range end",
            "name": "startTimeEnd",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List jobs succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "post": {
        "description": "Submit jobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "submit",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "x-nullable": true,
            "description": "Wait until job finished",
            "name": "wait",
            "in": "query"
          },
          {
            "x-nullable": false,
            "description": "Job spec",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobSpec"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submit job succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/jobs/{urn}": {
      "get": {
        "description": "Query job",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "query",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "x-nullable": true,
            "description": "Output line start",
            "name": "outputLineStart",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "x-nullable": true,
            "description": "Output lines limit",
            "name": "outputLineLimit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query job succeeded",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      },
      "delete": {
        "description": "Delete job",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "delete",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete job succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/jobs/{urn}/input": {
      "post": {
        "description": "Expect and input",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "input",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Input data",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Input job succeeded",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/jobs/{urn}/kill": {
      "post": {
        "description": "Kill job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "kill",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "x-nullable": true,
            "description": "Force kill",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Kill job succeeded",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "$ref": "#/responses/trait:standardErrors:400"
          },
          "401": {
            "$ref": "#/responses/trait:standardErrors:401"
          },
          "403": {
            "$ref": "#/responses/trait:standardErrors:403"
          },
          "404": {
            "$ref": "#/responses/trait:standardErrors:404"
          },
          "500": {
            "$ref": "#/responses/trait:standardErrors:500"
          }
        }
      }
    },
    "/readyz": {
      "get": {
        "description": "Ready status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Agent"
        ],
        "operationId": "readyz",
        "responses": {
          "200": {
            "description": "Ready status",
            "schema": {
              "$ref": "#/definitions/ReadyStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CronJob": {
      "description": "Cronjob",
      "required": [
        "spec",
        "jobs"
      ],
      "properties": {
        "id": {
          "description": "Cronjob id",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-]{36}$",
          "x-nullable": false
        },
        "jobs": {
          "description": "History jobs",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "spec": {
          "description": "Cronjob spec",
          "x-nullable": false,
          "$ref": "#/definitions/CronJobSpec"
        },
        "status": {
          "type": "string",
          "enum": [
            "running",
            "stoped"
          ],
          "x-nullable": false
        }
      }
    },
    "CronJobSpec": {
      "description": "Cronjob spec",
      "required": [
        "name",
        "jobspec",
        "schedule"
      ],
      "properties": {
        "jobspec": {
          "description": "Job spec",
          "x-nullable": false,
          "$ref": "#/definitions/JobSpec"
        },
        "name": {
          "description": "Job name",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-._]{1,32}$",
          "x-nullable": false
        },
        "schedule": {
          "description": "Cronjob schedule",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "CryptoData": {
      "description": "Data to encrypt or decrypt",
      "required": [
        "format",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Data dictionary",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "format": {
          "description": "Data format",
          "type": "string",
          "enum": [
            "base64",
            "raw"
          ],
          "x-nullable": false
        }
      }
    },
    "HealthProbe": {
      "description": "Node healthy probes",
      "required": [
        "name",
        "status"
      ],
      "properties": {
        "message": {
          "description": "Probe item message",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Probe item name",
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "description": "Probe item status",
          "type": "string",
          "enum": [
            "unknown",
            "healthy",
            "warning",
            "critical"
          ],
          "x-nullable": false
        }
      }
    },
    "HealthStatus": {
      "description": "Node healthy status",
      "required": [
        "status",
        "probes"
      ],
      "properties": {
        "probes": {
          "description": "Plugin health probes",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/HealthProbe"
            }
          },
          "x-nullable": false
        },
        "status": {
          "description": "Node healthy status",
          "type": "string",
          "enum": [
            "unknown",
            "healthy",
            "warning",
            "critical"
          ],
          "x-nullable": false
        }
      }
    },
    "Job": {
      "description": "Job",
      "required": [
        "id",
        "spec",
        "status"
      ],
      "properties": {
        "id": {
          "description": "Job id",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-]{36}$",
          "x-nullable": false
        },
        "spec": {
          "description": "Job spec",
          "x-nullable": false,
          "$ref": "#/definitions/JobSpec"
        },
        "status": {
          "description": "Job status",
          "x-nullable": false,
          "$ref": "#/definitions/JobStatus"
        },
        "urn": {
          "description": "Job urn",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
          "x-nullable": false
        }
      }
    },
    "JobInput": {
      "description": "Job input",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "description": "Input data",
          "type": "string",
          "x-nullable": false
        },
        "expect": {
          "description": "Expect string",
          "type": "string",
          "x-nullable": true
        },
        "timeout": {
          "description": "Expect timeout in seconds",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "JobOutput": {
      "description": "Job output",
      "required": [
        "lastLine",
        "moreLine",
        "lines"
      ],
      "properties": {
        "lastLine": {
          "description": "Last output line",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "lines": {
          "description": "Output",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "moreLine": {
          "description": "There is more line",
          "type": "boolean",
          "x-nullable": false
        }
      }
    },
    "JobSpec": {
      "description": "Job spec",
      "required": [
        "plugin",
        "operation"
      ],
      "properties": {
        "args": {
          "description": "Arguments",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "env": {
          "description": "Enviorment variables, key=value array",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "operation": {
          "description": "Operation",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
          "x-nullable": false
        },
        "plugin": {
          "description": "Plugin",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
          "x-nullable": false
        }
      }
    },
    "JobStatus": {
      "description": "Job status",
      "required": [
        "state"
      ],
      "properties": {
        "exitCode": {
          "description": "Exit code",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "output": {
          "description": "Job output",
          "x-nullable": true,
          "$ref": "#/definitions/JobOutput"
        },
        "state": {
          "description": "Job state",
          "type": "string",
          "enum": [
            "waiting",
            "running",
            "exited",
            "killed",
            "failed_start"
          ],
          "x-nullable": false
        }
      }
    },
    "KubeMetadata": {
      "description": "K8S metadata",
      "required": [
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true
        },
        "labels": {
          "description": "Labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true
        },
        "name": {
          "description": "Name",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "description": "Name",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "KubeSecret": {
      "description": "K8S secret",
      "required": [
        "apiVersion",
        "kind",
        "type",
        "metadata",
        "data"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version",
          "type": "string",
          "format": "^v1$",
          "x-nullable": false
        },
        "data": {
          "description": "Data dictionary",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "kind": {
          "description": "Kind",
          "type": "string",
          "format": "^Secret$",
          "x-nullable": false
        },
        "metadata": {
          "description": "Metadata",
          "x-nullable": false,
          "$ref": "#/definitions/KubeMetadata"
        },
        "type": {
          "description": "Kind",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "ReadyStatus": {
      "description": "Ready status",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ready",
            "not_ready"
          ],
          "x-nullable": false
        }
      }
    }
  },
  "responses": {
    "trait:standardErrors:400": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "trait:standardErrors:401": {
      "description": "",
      "schema": {
        "type": "object"
      }
    },
    "trait:standardErrors:403": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "trait:standardErrors:404": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "error"
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      }
    },
    "trait:standardErrors:500": {
      "description": "",
      "schema": {
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "description": "Agent status",
      "name": "Agent"
    },
    {
      "description": "Crypto service",
      "name": "Crypto"
    },
    {
      "description": "Plugin Jobs",
      "name": "Job"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Agent framwork to perform node operations\n",
    "title": "agent",
    "contact": {
      "name": "Wang Yaohui",
      "email": "yaohuiwang@outlook.com"
    },
    "version": "v1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/cronjobs": {
      "get": {
        "description": "List cronjobs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "listCronJobs",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Name filter",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List cronjobs succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CronJob"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "description": "Submit cronjobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "submitCronJobs",
        "parameters": [
          {
            "x-nullable": false,
            "description": "Cronjobs spec",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CronJobSpec"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submit cronjob succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CronJob"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/cronjobs/{id}": {
      "get": {
        "description": "Query cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "queryCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "description": "Update cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "updateCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Cronjob spec",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CronJobSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "description": "Delete cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "deleteCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete cronjob succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/cronjobs/{id}/start": {
      "post": {
        "description": "Start cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "startCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Start cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/cronjobs/{id}/stop": {
      "post": {
        "description": "Stop cronjob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cronjob"
        ],
        "operationId": "stopCronJob",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Cronjob id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Stop cronjob succeeded",
            "schema": {
              "$ref": "#/definitions/CronJob"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/crypto/decrypt": {
      "post": {
        "description": "Decrypt data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "decrypt",
        "parameters": [
          {
            "description": "Data to decrypt",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data decrypted",
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/crypto/encrypt": {
      "post": {
        "description": "Encrypt data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "encrypt",
        "parameters": [
          {
            "description": "Data to encrypt",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data encrypted",
            "schema": {
              "$ref": "#/definitions/CryptoData"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/crypto/secret/decrypt": {
      "post": {
        "description": "Decrypt k8s secret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "secretDecrypt",
        "parameters": [
          {
            "description": "Secret to decrypt",
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret decrypted",
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/crypto/secret/encrypt": {
      "post": {
        "description": "Encrypt k8s secret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "secretEncrypt",
        "parameters": [
          {
            "description": "Secret to encrypt",
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret encrypted",
            "schema": {
              "$ref": "#/definitions/KubeSecret"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/crypto/vault/{name}": {
      "get": {
        "description": "Query vault",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "queryVault",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-nullable": true,
            "description": "Key filter",
            "name": "keys",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get vault succeed",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "description": "Update vault",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "updateVault",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Vault data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update vault succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "description": "Create vault",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "createVault",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Vault data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create vault succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "description": "Delete vault",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "deleteVault",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-nullable": true,
            "description": "Key filter",
            "name": "keys",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": false,
            "description": "Vault name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete vault succeed",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/crypto/vaults": {
      "get": {
        "description": "List vaults",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Crypto"
        ],
        "operationId": "listVaults",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Name filter",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get vaults succeed",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Health status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Agent"
        ],
        "operationId": "healthz",
        "responses": {
          "200": {
            "description": "Health status",
            "schema": {
              "$ref": "#/definitions/HealthStatus"
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "description": "List Jobs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "list",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
            "type": "string",
            "x-nullable": true,
            "description": "Operation",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-nullable": true,
            "description": "Start time range begin",
            "name": "startTimeBegin",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-nullable": true,
            "description": "Start time range end",
            "name": "startTimeEnd",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List jobs succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "description": "Submit jobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "submit",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "x-nullable": true,
            "description": "Wait until job finished",
            "name": "wait",
            "in": "query"
          },
          {
            "x-nullable": false,
            "description": "Job spec",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobSpec"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submit job succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/jobs/{urn}": {
      "get": {
        "description": "Query job",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "query",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "x-nullable": true,
            "description": "Output line start",
            "name": "outputLineStart",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "x-nullable": true,
            "description": "Output lines limit",
            "name": "outputLineLimit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query job succeeded",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "description": "Delete job",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "delete",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete job succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/jobs/{urn}/input": {
      "post": {
        "description": "Expect and input",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "input",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "description": "Input data",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Input job succeeded",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/jobs/{urn}/kill": {
      "post": {
        "description": "Kill job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Job"
        ],
        "operationId": "kill",
        "parameters": [
          {
            "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
            "type": "string",
            "x-nullable": false,
            "description": "Job urn",
            "name": "urn",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "x-nullable": true,
            "description": "Force kill",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Kill job succeeded",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/readyz": {
      "get": {
        "description": "Ready status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Agent"
        ],
        "operationId": "readyz",
        "responses": {
          "200": {
            "description": "Ready status",
            "schema": {
              "$ref": "#/definitions/ReadyStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CronJob": {
      "description": "Cronjob",
      "required": [
        "spec",
        "jobs"
      ],
      "properties": {
        "id": {
          "description": "Cronjob id",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-]{36}$",
          "x-nullable": false
        },
        "jobs": {
          "description": "History jobs",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "spec": {
          "description": "Cronjob spec",
          "x-nullable": false,
          "$ref": "#/definitions/CronJobSpec"
        },
        "status": {
          "type": "string",
          "enum": [
            "running",
            "stoped"
          ],
          "x-nullable": false
        }
      }
    },
    "CronJobSpec": {
      "description": "Cronjob spec",
      "required": [
        "name",
        "jobspec",
        "schedule"
      ],
      "properties": {
        "jobspec": {
          "description": "Job spec",
          "x-nullable": false,
          "$ref": "#/definitions/JobSpec"
        },
        "name": {
          "description": "Job name",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-._]{1,32}$",
          "x-nullable": false
        },
        "schedule": {
          "description": "Cronjob schedule",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "CryptoData": {
      "description": "Data to encrypt or decrypt",
      "required": [
        "format",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Data dictionary",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "format": {
          "description": "Data format",
          "type": "string",
          "enum": [
            "base64",
            "raw"
          ],
          "x-nullable": false
        }
      }
    },
    "HealthProbe": {
      "description": "Node healthy probes",
      "required": [
        "name",
        "status"
      ],
      "properties": {
        "message": {
          "description": "Probe item message",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Probe item name",
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "description": "Probe item status",
          "type": "string",
          "enum": [
            "unknown",
            "healthy",
            "warning",
            "critical"
          ],
          "x-nullable": false
        }
      }
    },
    "HealthStatus": {
      "description": "Node healthy status",
      "required": [
        "status",
        "probes"
      ],
      "properties": {
        "probes": {
          "description": "Plugin health probes",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/HealthProbe"
            }
          },
          "x-nullable": false
        },
        "status": {
          "description": "Node healthy status",
          "type": "string",
          "enum": [
            "unknown",
            "healthy",
            "warning",
            "critical"
          ],
          "x-nullable": false
        }
      }
    },
    "Job": {
      "description": "Job",
      "required": [
        "id",
        "spec",
        "status"
      ],
      "properties": {
        "id": {
          "description": "Job id",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-]{36}$",
          "x-nullable": false
        },
        "spec": {
          "description": "Job spec",
          "x-nullable": false,
          "$ref": "#/definitions/JobSpec"
        },
        "status": {
          "description": "Job status",
          "x-nullable": false,
          "$ref": "#/definitions/JobStatus"
        },
        "urn": {
          "description": "Job urn",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-._]{1,32}:jobs:[A-Za-z0-9\\-._]{1,32}:[A-Za-z0-9\\-]{36}$",
          "x-nullable": false
        }
      }
    },
    "JobInput": {
      "description": "Job input",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "description": "Input data",
          "type": "string",
          "x-nullable": false
        },
        "expect": {
          "description": "Expect string",
          "type": "string",
          "x-nullable": true
        },
        "timeout": {
          "description": "Expect timeout in seconds",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "JobOutput": {
      "description": "Job output",
      "required": [
        "lastLine",
        "moreLine",
        "lines"
      ],
      "properties": {
        "lastLine": {
          "description": "Last output line",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "lines": {
          "description": "Output",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "moreLine": {
          "description": "There is more line",
          "type": "boolean",
          "x-nullable": false
        }
      }
    },
    "JobSpec": {
      "description": "Job spec",
      "required": [
        "plugin",
        "operation"
      ],
      "properties": {
        "args": {
          "description": "Arguments",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "env": {
          "description": "Enviorment variables, key=value array",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "operation": {
          "description": "Operation",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
          "x-nullable": false
        },
        "plugin": {
          "description": "Plugin",
          "type": "string",
          "pattern": "^[A-Za-z0-9\\-_.]{1,32}$",
          "x-nullable": false
        }
      }
    },
    "JobStatus": {
      "description": "Job status",
      "required": [
        "state"
      ],
      "properties": {
        "exitCode": {
          "description": "Exit code",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "output": {
          "description": "Job output",
          "x-nullable": true,
          "$ref": "#/definitions/JobOutput"
        },
        "state": {
          "description": "Job state",
          "type": "string",
          "enum": [
            "waiting",
            "running",
            "exited",
            "killed",
            "failed_start"
          ],
          "x-nullable": false
        }
      }
    },
    "KubeMetadata": {
      "description": "K8S metadata",
      "required": [
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true
        },
        "labels": {
          "description": "Labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true
        },
        "name": {
          "description": "Name",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "description": "Name",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "KubeSecret": {
      "description": "K8S secret",
      "required": [
        "apiVersion",
        "kind",
        "type",
        "metadata",
        "data"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version",
          "type": "string",
          "format": "^v1$",
          "x-nullable": false
        },
        "data": {
          "description": "Data dictionary",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "kind": {
          "description": "Kind",
          "type": "string",
          "format": "^Secret$",
          "x-nullable": false
        },
        "metadata": {
          "description": "Metadata",
          "x-nullable": false,
          "$ref": "#/definitions/KubeMetadata"
        },
        "type": {
          "description": "Kind",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "ReadyStatus": {
      "description": "Ready status",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ready",
            "not_ready"
          ],
          "x-nullable": false
        }
      }
    }
  },
  "responses": {
    "trait:standardErrors:400": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "trait:standardErrors:401": {
      "description": "",
      "schema": {
        "type": "object"
      }
    },
    "trait:standardErrors:403": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "trait:standardErrors:404": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "error"
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      }
    },
    "trait:standardErrors:500": {
      "description": "",
      "schema": {
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "description": "Agent status",
      "name": "Agent"
    },
    {
      "description": "Crypto service",
      "name": "Crypto"
    },
    {
      "description": "Plugin Jobs",
      "name": "Job"
    }
  ]
}`))
}
