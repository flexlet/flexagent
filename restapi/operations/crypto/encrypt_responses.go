// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// EncryptOKCode is the HTTP code returned for type EncryptOK
const EncryptOKCode int = 200

/*EncryptOK Data encrypted

swagger:response encryptOK
*/
type EncryptOK struct {

	/*
	  In: Body
	*/
	Payload *models.CryptoData `json:"body,omitempty"`
}

// NewEncryptOK creates EncryptOK with default headers values
func NewEncryptOK() *EncryptOK {

	return &EncryptOK{}
}

// WithPayload adds the payload to the encrypt o k response
func (o *EncryptOK) WithPayload(payload *models.CryptoData) *EncryptOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the encrypt o k response
func (o *EncryptOK) SetPayload(payload *models.CryptoData) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EncryptOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EncryptBadRequestCode is the HTTP code returned for type EncryptBadRequest
const EncryptBadRequestCode int = 400

/*EncryptBadRequest encrypt bad request

swagger:response encryptBadRequest
*/
type EncryptBadRequest struct {

	/*
	  In: Body
	*/
	Payload *EncryptBadRequestBody `json:"body,omitempty"`
}

// NewEncryptBadRequest creates EncryptBadRequest with default headers values
func NewEncryptBadRequest() *EncryptBadRequest {

	return &EncryptBadRequest{}
}

// WithPayload adds the payload to the encrypt bad request response
func (o *EncryptBadRequest) WithPayload(payload *EncryptBadRequestBody) *EncryptBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the encrypt bad request response
func (o *EncryptBadRequest) SetPayload(payload *EncryptBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EncryptBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EncryptUnauthorizedCode is the HTTP code returned for type EncryptUnauthorized
const EncryptUnauthorizedCode int = 401

/*EncryptUnauthorized encrypt unauthorized

swagger:response encryptUnauthorized
*/
type EncryptUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewEncryptUnauthorized creates EncryptUnauthorized with default headers values
func NewEncryptUnauthorized() *EncryptUnauthorized {

	return &EncryptUnauthorized{}
}

// WithPayload adds the payload to the encrypt unauthorized response
func (o *EncryptUnauthorized) WithPayload(payload interface{}) *EncryptUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the encrypt unauthorized response
func (o *EncryptUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EncryptUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// EncryptForbiddenCode is the HTTP code returned for type EncryptForbidden
const EncryptForbiddenCode int = 403

/*EncryptForbidden encrypt forbidden

swagger:response encryptForbidden
*/
type EncryptForbidden struct {

	/*
	  In: Body
	*/
	Payload *EncryptForbiddenBody `json:"body,omitempty"`
}

// NewEncryptForbidden creates EncryptForbidden with default headers values
func NewEncryptForbidden() *EncryptForbidden {

	return &EncryptForbidden{}
}

// WithPayload adds the payload to the encrypt forbidden response
func (o *EncryptForbidden) WithPayload(payload *EncryptForbiddenBody) *EncryptForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the encrypt forbidden response
func (o *EncryptForbidden) SetPayload(payload *EncryptForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EncryptForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EncryptNotFoundCode is the HTTP code returned for type EncryptNotFound
const EncryptNotFoundCode int = 404

/*EncryptNotFound encrypt not found

swagger:response encryptNotFound
*/
type EncryptNotFound struct {

	/*
	  In: Body
	*/
	Payload *EncryptNotFoundBody `json:"body,omitempty"`
}

// NewEncryptNotFound creates EncryptNotFound with default headers values
func NewEncryptNotFound() *EncryptNotFound {

	return &EncryptNotFound{}
}

// WithPayload adds the payload to the encrypt not found response
func (o *EncryptNotFound) WithPayload(payload *EncryptNotFoundBody) *EncryptNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the encrypt not found response
func (o *EncryptNotFound) SetPayload(payload *EncryptNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EncryptNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EncryptInternalServerErrorCode is the HTTP code returned for type EncryptInternalServerError
const EncryptInternalServerErrorCode int = 500

/*EncryptInternalServerError encrypt internal server error

swagger:response encryptInternalServerError
*/
type EncryptInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewEncryptInternalServerError creates EncryptInternalServerError with default headers values
func NewEncryptInternalServerError() *EncryptInternalServerError {

	return &EncryptInternalServerError{}
}

// WithPayload adds the payload to the encrypt internal server error response
func (o *EncryptInternalServerError) WithPayload(payload interface{}) *EncryptInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the encrypt internal server error response
func (o *EncryptInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EncryptInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
