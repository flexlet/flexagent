// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretDecryptHandlerFunc turns a function with the right signature into a secret decrypt handler
type SecretDecryptHandlerFunc func(SecretDecryptParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SecretDecryptHandlerFunc) Handle(params SecretDecryptParams) middleware.Responder {
	return fn(params)
}

// SecretDecryptHandler interface for that can handle valid secret decrypt params
type SecretDecryptHandler interface {
	Handle(SecretDecryptParams) middleware.Responder
}

// NewSecretDecrypt creates a new http.Handler for the secret decrypt operation
func NewSecretDecrypt(ctx *middleware.Context, handler SecretDecryptHandler) *SecretDecrypt {
	return &SecretDecrypt{Context: ctx, Handler: handler}
}

/* SecretDecrypt swagger:route POST /crypto/secret/decrypt Crypto secretDecrypt

Decrypt k8s secret

*/
type SecretDecrypt struct {
	Context *middleware.Context
	Handler SecretDecryptHandler
}

func (o *SecretDecrypt) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSecretDecryptParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SecretDecryptBadRequestBody secret decrypt bad request body
//
// swagger:model SecretDecryptBadRequestBody
type SecretDecryptBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this secret decrypt bad request body
func (o *SecretDecryptBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretDecryptBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret decrypt bad request body based on context it is used
func (o *SecretDecryptBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretDecryptBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretDecryptBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SecretDecryptBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SecretDecryptForbiddenBody secret decrypt forbidden body
//
// swagger:model SecretDecryptForbiddenBody
type SecretDecryptForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this secret decrypt forbidden body
func (o *SecretDecryptForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretDecryptForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret decrypt forbidden body based on context it is used
func (o *SecretDecryptForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretDecryptForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretDecryptForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SecretDecryptForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SecretDecryptNotFoundBody secret decrypt not found body
//
// swagger:model SecretDecryptNotFoundBody
type SecretDecryptNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this secret decrypt not found body
func (o *SecretDecryptNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretDecryptNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SecretDecryptNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret decrypt not found body based on context it is used
func (o *SecretDecryptNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretDecryptNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretDecryptNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SecretDecryptNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
