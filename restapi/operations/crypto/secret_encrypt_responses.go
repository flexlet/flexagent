// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// SecretEncryptOKCode is the HTTP code returned for type SecretEncryptOK
const SecretEncryptOKCode int = 200

/*SecretEncryptOK Secret encrypted

swagger:response secretEncryptOK
*/
type SecretEncryptOK struct {

	/*
	  In: Body
	*/
	Payload *models.KubeSecret `json:"body,omitempty"`
}

// NewSecretEncryptOK creates SecretEncryptOK with default headers values
func NewSecretEncryptOK() *SecretEncryptOK {

	return &SecretEncryptOK{}
}

// WithPayload adds the payload to the secret encrypt o k response
func (o *SecretEncryptOK) WithPayload(payload *models.KubeSecret) *SecretEncryptOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secret encrypt o k response
func (o *SecretEncryptOK) SetPayload(payload *models.KubeSecret) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretEncryptOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretEncryptBadRequestCode is the HTTP code returned for type SecretEncryptBadRequest
const SecretEncryptBadRequestCode int = 400

/*SecretEncryptBadRequest secret encrypt bad request

swagger:response secretEncryptBadRequest
*/
type SecretEncryptBadRequest struct {

	/*
	  In: Body
	*/
	Payload *SecretEncryptBadRequestBody `json:"body,omitempty"`
}

// NewSecretEncryptBadRequest creates SecretEncryptBadRequest with default headers values
func NewSecretEncryptBadRequest() *SecretEncryptBadRequest {

	return &SecretEncryptBadRequest{}
}

// WithPayload adds the payload to the secret encrypt bad request response
func (o *SecretEncryptBadRequest) WithPayload(payload *SecretEncryptBadRequestBody) *SecretEncryptBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secret encrypt bad request response
func (o *SecretEncryptBadRequest) SetPayload(payload *SecretEncryptBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretEncryptBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretEncryptUnauthorizedCode is the HTTP code returned for type SecretEncryptUnauthorized
const SecretEncryptUnauthorizedCode int = 401

/*SecretEncryptUnauthorized secret encrypt unauthorized

swagger:response secretEncryptUnauthorized
*/
type SecretEncryptUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewSecretEncryptUnauthorized creates SecretEncryptUnauthorized with default headers values
func NewSecretEncryptUnauthorized() *SecretEncryptUnauthorized {

	return &SecretEncryptUnauthorized{}
}

// WithPayload adds the payload to the secret encrypt unauthorized response
func (o *SecretEncryptUnauthorized) WithPayload(payload interface{}) *SecretEncryptUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secret encrypt unauthorized response
func (o *SecretEncryptUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretEncryptUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SecretEncryptForbiddenCode is the HTTP code returned for type SecretEncryptForbidden
const SecretEncryptForbiddenCode int = 403

/*SecretEncryptForbidden secret encrypt forbidden

swagger:response secretEncryptForbidden
*/
type SecretEncryptForbidden struct {

	/*
	  In: Body
	*/
	Payload *SecretEncryptForbiddenBody `json:"body,omitempty"`
}

// NewSecretEncryptForbidden creates SecretEncryptForbidden with default headers values
func NewSecretEncryptForbidden() *SecretEncryptForbidden {

	return &SecretEncryptForbidden{}
}

// WithPayload adds the payload to the secret encrypt forbidden response
func (o *SecretEncryptForbidden) WithPayload(payload *SecretEncryptForbiddenBody) *SecretEncryptForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secret encrypt forbidden response
func (o *SecretEncryptForbidden) SetPayload(payload *SecretEncryptForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretEncryptForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretEncryptNotFoundCode is the HTTP code returned for type SecretEncryptNotFound
const SecretEncryptNotFoundCode int = 404

/*SecretEncryptNotFound secret encrypt not found

swagger:response secretEncryptNotFound
*/
type SecretEncryptNotFound struct {

	/*
	  In: Body
	*/
	Payload *SecretEncryptNotFoundBody `json:"body,omitempty"`
}

// NewSecretEncryptNotFound creates SecretEncryptNotFound with default headers values
func NewSecretEncryptNotFound() *SecretEncryptNotFound {

	return &SecretEncryptNotFound{}
}

// WithPayload adds the payload to the secret encrypt not found response
func (o *SecretEncryptNotFound) WithPayload(payload *SecretEncryptNotFoundBody) *SecretEncryptNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secret encrypt not found response
func (o *SecretEncryptNotFound) SetPayload(payload *SecretEncryptNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretEncryptNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretEncryptInternalServerErrorCode is the HTTP code returned for type SecretEncryptInternalServerError
const SecretEncryptInternalServerErrorCode int = 500

/*SecretEncryptInternalServerError secret encrypt internal server error

swagger:response secretEncryptInternalServerError
*/
type SecretEncryptInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewSecretEncryptInternalServerError creates SecretEncryptInternalServerError with default headers values
func NewSecretEncryptInternalServerError() *SecretEncryptInternalServerError {

	return &SecretEncryptInternalServerError{}
}

// WithPayload adds the payload to the secret encrypt internal server error response
func (o *SecretEncryptInternalServerError) WithPayload(payload interface{}) *SecretEncryptInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secret encrypt internal server error response
func (o *SecretEncryptInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretEncryptInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
