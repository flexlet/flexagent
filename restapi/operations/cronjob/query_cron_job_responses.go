// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// QueryCronJobOKCode is the HTTP code returned for type QueryCronJobOK
const QueryCronJobOKCode int = 200

/*QueryCronJobOK Query cronjob succeeded

swagger:response queryCronJobOK
*/
type QueryCronJobOK struct {

	/*
	  In: Body
	*/
	Payload *models.CronJob `json:"body,omitempty"`
}

// NewQueryCronJobOK creates QueryCronJobOK with default headers values
func NewQueryCronJobOK() *QueryCronJobOK {

	return &QueryCronJobOK{}
}

// WithPayload adds the payload to the query cron job o k response
func (o *QueryCronJobOK) WithPayload(payload *models.CronJob) *QueryCronJobOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query cron job o k response
func (o *QueryCronJobOK) SetPayload(payload *models.CronJob) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryCronJobOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryCronJobBadRequestCode is the HTTP code returned for type QueryCronJobBadRequest
const QueryCronJobBadRequestCode int = 400

/*QueryCronJobBadRequest query cron job bad request

swagger:response queryCronJobBadRequest
*/
type QueryCronJobBadRequest struct {

	/*
	  In: Body
	*/
	Payload *QueryCronJobBadRequestBody `json:"body,omitempty"`
}

// NewQueryCronJobBadRequest creates QueryCronJobBadRequest with default headers values
func NewQueryCronJobBadRequest() *QueryCronJobBadRequest {

	return &QueryCronJobBadRequest{}
}

// WithPayload adds the payload to the query cron job bad request response
func (o *QueryCronJobBadRequest) WithPayload(payload *QueryCronJobBadRequestBody) *QueryCronJobBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query cron job bad request response
func (o *QueryCronJobBadRequest) SetPayload(payload *QueryCronJobBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryCronJobBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryCronJobUnauthorizedCode is the HTTP code returned for type QueryCronJobUnauthorized
const QueryCronJobUnauthorizedCode int = 401

/*QueryCronJobUnauthorized query cron job unauthorized

swagger:response queryCronJobUnauthorized
*/
type QueryCronJobUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewQueryCronJobUnauthorized creates QueryCronJobUnauthorized with default headers values
func NewQueryCronJobUnauthorized() *QueryCronJobUnauthorized {

	return &QueryCronJobUnauthorized{}
}

// WithPayload adds the payload to the query cron job unauthorized response
func (o *QueryCronJobUnauthorized) WithPayload(payload interface{}) *QueryCronJobUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query cron job unauthorized response
func (o *QueryCronJobUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryCronJobUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// QueryCronJobForbiddenCode is the HTTP code returned for type QueryCronJobForbidden
const QueryCronJobForbiddenCode int = 403

/*QueryCronJobForbidden query cron job forbidden

swagger:response queryCronJobForbidden
*/
type QueryCronJobForbidden struct {

	/*
	  In: Body
	*/
	Payload *QueryCronJobForbiddenBody `json:"body,omitempty"`
}

// NewQueryCronJobForbidden creates QueryCronJobForbidden with default headers values
func NewQueryCronJobForbidden() *QueryCronJobForbidden {

	return &QueryCronJobForbidden{}
}

// WithPayload adds the payload to the query cron job forbidden response
func (o *QueryCronJobForbidden) WithPayload(payload *QueryCronJobForbiddenBody) *QueryCronJobForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query cron job forbidden response
func (o *QueryCronJobForbidden) SetPayload(payload *QueryCronJobForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryCronJobForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryCronJobNotFoundCode is the HTTP code returned for type QueryCronJobNotFound
const QueryCronJobNotFoundCode int = 404

/*QueryCronJobNotFound query cron job not found

swagger:response queryCronJobNotFound
*/
type QueryCronJobNotFound struct {

	/*
	  In: Body
	*/
	Payload *QueryCronJobNotFoundBody `json:"body,omitempty"`
}

// NewQueryCronJobNotFound creates QueryCronJobNotFound with default headers values
func NewQueryCronJobNotFound() *QueryCronJobNotFound {

	return &QueryCronJobNotFound{}
}

// WithPayload adds the payload to the query cron job not found response
func (o *QueryCronJobNotFound) WithPayload(payload *QueryCronJobNotFoundBody) *QueryCronJobNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query cron job not found response
func (o *QueryCronJobNotFound) SetPayload(payload *QueryCronJobNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryCronJobNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryCronJobInternalServerErrorCode is the HTTP code returned for type QueryCronJobInternalServerError
const QueryCronJobInternalServerErrorCode int = 500

/*QueryCronJobInternalServerError query cron job internal server error

swagger:response queryCronJobInternalServerError
*/
type QueryCronJobInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewQueryCronJobInternalServerError creates QueryCronJobInternalServerError with default headers values
func NewQueryCronJobInternalServerError() *QueryCronJobInternalServerError {

	return &QueryCronJobInternalServerError{}
}

// WithPayload adds the payload to the query cron job internal server error response
func (o *QueryCronJobInternalServerError) WithPayload(payload interface{}) *QueryCronJobInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query cron job internal server error response
func (o *QueryCronJobInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryCronJobInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
