// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubmitCronJobsHandlerFunc turns a function with the right signature into a submit cron jobs handler
type SubmitCronJobsHandlerFunc func(SubmitCronJobsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubmitCronJobsHandlerFunc) Handle(params SubmitCronJobsParams) middleware.Responder {
	return fn(params)
}

// SubmitCronJobsHandler interface for that can handle valid submit cron jobs params
type SubmitCronJobsHandler interface {
	Handle(SubmitCronJobsParams) middleware.Responder
}

// NewSubmitCronJobs creates a new http.Handler for the submit cron jobs operation
func NewSubmitCronJobs(ctx *middleware.Context, handler SubmitCronJobsHandler) *SubmitCronJobs {
	return &SubmitCronJobs{Context: ctx, Handler: handler}
}

/* SubmitCronJobs swagger:route POST /cronjobs Cronjob submitCronJobs

Submit cronjobs

*/
type SubmitCronJobs struct {
	Context *middleware.Context
	Handler SubmitCronJobsHandler
}

func (o *SubmitCronJobs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSubmitCronJobsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SubmitCronJobsBadRequestBody submit cron jobs bad request body
//
// swagger:model SubmitCronJobsBadRequestBody
type SubmitCronJobsBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this submit cron jobs bad request body
func (o *SubmitCronJobsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCronJobsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit cron jobs bad request body based on context it is used
func (o *SubmitCronJobsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCronJobsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCronJobsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SubmitCronJobsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SubmitCronJobsForbiddenBody submit cron jobs forbidden body
//
// swagger:model SubmitCronJobsForbiddenBody
type SubmitCronJobsForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this submit cron jobs forbidden body
func (o *SubmitCronJobsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCronJobsForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit cron jobs forbidden body based on context it is used
func (o *SubmitCronJobsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCronJobsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCronJobsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SubmitCronJobsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SubmitCronJobsNotFoundBody submit cron jobs not found body
//
// swagger:model SubmitCronJobsNotFoundBody
type SubmitCronJobsNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this submit cron jobs not found body
func (o *SubmitCronJobsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCronJobsNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SubmitCronJobsNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit cron jobs not found body based on context it is used
func (o *SubmitCronJobsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCronJobsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCronJobsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SubmitCronJobsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
