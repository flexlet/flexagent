// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// StopCronJobOKCode is the HTTP code returned for type StopCronJobOK
const StopCronJobOKCode int = 200

/*StopCronJobOK Stop cronjob succeeded

swagger:response stopCronJobOK
*/
type StopCronJobOK struct {

	/*
	  In: Body
	*/
	Payload *models.CronJob `json:"body,omitempty"`
}

// NewStopCronJobOK creates StopCronJobOK with default headers values
func NewStopCronJobOK() *StopCronJobOK {

	return &StopCronJobOK{}
}

// WithPayload adds the payload to the stop cron job o k response
func (o *StopCronJobOK) WithPayload(payload *models.CronJob) *StopCronJobOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop cron job o k response
func (o *StopCronJobOK) SetPayload(payload *models.CronJob) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopCronJobOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopCronJobBadRequestCode is the HTTP code returned for type StopCronJobBadRequest
const StopCronJobBadRequestCode int = 400

/*StopCronJobBadRequest stop cron job bad request

swagger:response stopCronJobBadRequest
*/
type StopCronJobBadRequest struct {

	/*
	  In: Body
	*/
	Payload *StopCronJobBadRequestBody `json:"body,omitempty"`
}

// NewStopCronJobBadRequest creates StopCronJobBadRequest with default headers values
func NewStopCronJobBadRequest() *StopCronJobBadRequest {

	return &StopCronJobBadRequest{}
}

// WithPayload adds the payload to the stop cron job bad request response
func (o *StopCronJobBadRequest) WithPayload(payload *StopCronJobBadRequestBody) *StopCronJobBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop cron job bad request response
func (o *StopCronJobBadRequest) SetPayload(payload *StopCronJobBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopCronJobBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopCronJobUnauthorizedCode is the HTTP code returned for type StopCronJobUnauthorized
const StopCronJobUnauthorizedCode int = 401

/*StopCronJobUnauthorized stop cron job unauthorized

swagger:response stopCronJobUnauthorized
*/
type StopCronJobUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewStopCronJobUnauthorized creates StopCronJobUnauthorized with default headers values
func NewStopCronJobUnauthorized() *StopCronJobUnauthorized {

	return &StopCronJobUnauthorized{}
}

// WithPayload adds the payload to the stop cron job unauthorized response
func (o *StopCronJobUnauthorized) WithPayload(payload interface{}) *StopCronJobUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop cron job unauthorized response
func (o *StopCronJobUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopCronJobUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// StopCronJobForbiddenCode is the HTTP code returned for type StopCronJobForbidden
const StopCronJobForbiddenCode int = 403

/*StopCronJobForbidden stop cron job forbidden

swagger:response stopCronJobForbidden
*/
type StopCronJobForbidden struct {

	/*
	  In: Body
	*/
	Payload *StopCronJobForbiddenBody `json:"body,omitempty"`
}

// NewStopCronJobForbidden creates StopCronJobForbidden with default headers values
func NewStopCronJobForbidden() *StopCronJobForbidden {

	return &StopCronJobForbidden{}
}

// WithPayload adds the payload to the stop cron job forbidden response
func (o *StopCronJobForbidden) WithPayload(payload *StopCronJobForbiddenBody) *StopCronJobForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop cron job forbidden response
func (o *StopCronJobForbidden) SetPayload(payload *StopCronJobForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopCronJobForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopCronJobNotFoundCode is the HTTP code returned for type StopCronJobNotFound
const StopCronJobNotFoundCode int = 404

/*StopCronJobNotFound stop cron job not found

swagger:response stopCronJobNotFound
*/
type StopCronJobNotFound struct {

	/*
	  In: Body
	*/
	Payload *StopCronJobNotFoundBody `json:"body,omitempty"`
}

// NewStopCronJobNotFound creates StopCronJobNotFound with default headers values
func NewStopCronJobNotFound() *StopCronJobNotFound {

	return &StopCronJobNotFound{}
}

// WithPayload adds the payload to the stop cron job not found response
func (o *StopCronJobNotFound) WithPayload(payload *StopCronJobNotFoundBody) *StopCronJobNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop cron job not found response
func (o *StopCronJobNotFound) SetPayload(payload *StopCronJobNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopCronJobNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopCronJobInternalServerErrorCode is the HTTP code returned for type StopCronJobInternalServerError
const StopCronJobInternalServerErrorCode int = 500

/*StopCronJobInternalServerError stop cron job internal server error

swagger:response stopCronJobInternalServerError
*/
type StopCronJobInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewStopCronJobInternalServerError creates StopCronJobInternalServerError with default headers values
func NewStopCronJobInternalServerError() *StopCronJobInternalServerError {

	return &StopCronJobInternalServerError{}
}

// WithPayload adds the payload to the stop cron job internal server error response
func (o *StopCronJobInternalServerError) WithPayload(payload interface{}) *StopCronJobInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop cron job internal server error response
func (o *StopCronJobInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopCronJobInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
