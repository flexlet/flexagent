// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// StartCronJobOKCode is the HTTP code returned for type StartCronJobOK
const StartCronJobOKCode int = 200

/*StartCronJobOK Start cronjob succeeded

swagger:response startCronJobOK
*/
type StartCronJobOK struct {

	/*
	  In: Body
	*/
	Payload *models.CronJob `json:"body,omitempty"`
}

// NewStartCronJobOK creates StartCronJobOK with default headers values
func NewStartCronJobOK() *StartCronJobOK {

	return &StartCronJobOK{}
}

// WithPayload adds the payload to the start cron job o k response
func (o *StartCronJobOK) WithPayload(payload *models.CronJob) *StartCronJobOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start cron job o k response
func (o *StartCronJobOK) SetPayload(payload *models.CronJob) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartCronJobOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartCronJobBadRequestCode is the HTTP code returned for type StartCronJobBadRequest
const StartCronJobBadRequestCode int = 400

/*StartCronJobBadRequest start cron job bad request

swagger:response startCronJobBadRequest
*/
type StartCronJobBadRequest struct {

	/*
	  In: Body
	*/
	Payload *StartCronJobBadRequestBody `json:"body,omitempty"`
}

// NewStartCronJobBadRequest creates StartCronJobBadRequest with default headers values
func NewStartCronJobBadRequest() *StartCronJobBadRequest {

	return &StartCronJobBadRequest{}
}

// WithPayload adds the payload to the start cron job bad request response
func (o *StartCronJobBadRequest) WithPayload(payload *StartCronJobBadRequestBody) *StartCronJobBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start cron job bad request response
func (o *StartCronJobBadRequest) SetPayload(payload *StartCronJobBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartCronJobBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartCronJobUnauthorizedCode is the HTTP code returned for type StartCronJobUnauthorized
const StartCronJobUnauthorizedCode int = 401

/*StartCronJobUnauthorized start cron job unauthorized

swagger:response startCronJobUnauthorized
*/
type StartCronJobUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewStartCronJobUnauthorized creates StartCronJobUnauthorized with default headers values
func NewStartCronJobUnauthorized() *StartCronJobUnauthorized {

	return &StartCronJobUnauthorized{}
}

// WithPayload adds the payload to the start cron job unauthorized response
func (o *StartCronJobUnauthorized) WithPayload(payload interface{}) *StartCronJobUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start cron job unauthorized response
func (o *StartCronJobUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartCronJobUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// StartCronJobForbiddenCode is the HTTP code returned for type StartCronJobForbidden
const StartCronJobForbiddenCode int = 403

/*StartCronJobForbidden start cron job forbidden

swagger:response startCronJobForbidden
*/
type StartCronJobForbidden struct {

	/*
	  In: Body
	*/
	Payload *StartCronJobForbiddenBody `json:"body,omitempty"`
}

// NewStartCronJobForbidden creates StartCronJobForbidden with default headers values
func NewStartCronJobForbidden() *StartCronJobForbidden {

	return &StartCronJobForbidden{}
}

// WithPayload adds the payload to the start cron job forbidden response
func (o *StartCronJobForbidden) WithPayload(payload *StartCronJobForbiddenBody) *StartCronJobForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start cron job forbidden response
func (o *StartCronJobForbidden) SetPayload(payload *StartCronJobForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartCronJobForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartCronJobNotFoundCode is the HTTP code returned for type StartCronJobNotFound
const StartCronJobNotFoundCode int = 404

/*StartCronJobNotFound start cron job not found

swagger:response startCronJobNotFound
*/
type StartCronJobNotFound struct {

	/*
	  In: Body
	*/
	Payload *StartCronJobNotFoundBody `json:"body,omitempty"`
}

// NewStartCronJobNotFound creates StartCronJobNotFound with default headers values
func NewStartCronJobNotFound() *StartCronJobNotFound {

	return &StartCronJobNotFound{}
}

// WithPayload adds the payload to the start cron job not found response
func (o *StartCronJobNotFound) WithPayload(payload *StartCronJobNotFoundBody) *StartCronJobNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start cron job not found response
func (o *StartCronJobNotFound) SetPayload(payload *StartCronJobNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartCronJobNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartCronJobInternalServerErrorCode is the HTTP code returned for type StartCronJobInternalServerError
const StartCronJobInternalServerErrorCode int = 500

/*StartCronJobInternalServerError start cron job internal server error

swagger:response startCronJobInternalServerError
*/
type StartCronJobInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewStartCronJobInternalServerError creates StartCronJobInternalServerError with default headers values
func NewStartCronJobInternalServerError() *StartCronJobInternalServerError {

	return &StartCronJobInternalServerError{}
}

// WithPayload adds the payload to the start cron job internal server error response
func (o *StartCronJobInternalServerError) WithPayload(payload interface{}) *StartCronJobInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start cron job internal server error response
func (o *StartCronJobInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartCronJobInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
