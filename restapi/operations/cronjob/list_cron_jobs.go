// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListCronJobsHandlerFunc turns a function with the right signature into a list cron jobs handler
type ListCronJobsHandlerFunc func(ListCronJobsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListCronJobsHandlerFunc) Handle(params ListCronJobsParams) middleware.Responder {
	return fn(params)
}

// ListCronJobsHandler interface for that can handle valid list cron jobs params
type ListCronJobsHandler interface {
	Handle(ListCronJobsParams) middleware.Responder
}

// NewListCronJobs creates a new http.Handler for the list cron jobs operation
func NewListCronJobs(ctx *middleware.Context, handler ListCronJobsHandler) *ListCronJobs {
	return &ListCronJobs{Context: ctx, Handler: handler}
}

/* ListCronJobs swagger:route GET /cronjobs Cronjob listCronJobs

List cronjobs

*/
type ListCronJobs struct {
	Context *middleware.Context
	Handler ListCronJobsHandler
}

func (o *ListCronJobs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListCronJobsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListCronJobsBadRequestBody list cron jobs bad request body
//
// swagger:model ListCronJobsBadRequestBody
type ListCronJobsBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list cron jobs bad request body
func (o *ListCronJobsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListCronJobsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listCronJobsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list cron jobs bad request body based on context it is used
func (o *ListCronJobsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListCronJobsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListCronJobsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListCronJobsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ListCronJobsForbiddenBody list cron jobs forbidden body
//
// swagger:model ListCronJobsForbiddenBody
type ListCronJobsForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list cron jobs forbidden body
func (o *ListCronJobsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListCronJobsForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listCronJobsForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list cron jobs forbidden body based on context it is used
func (o *ListCronJobsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListCronJobsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListCronJobsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ListCronJobsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ListCronJobsNotFoundBody list cron jobs not found body
//
// swagger:model ListCronJobsNotFoundBody
type ListCronJobsNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this list cron jobs not found body
func (o *ListCronJobsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListCronJobsNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("listCronJobsNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *ListCronJobsNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("listCronJobsNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list cron jobs not found body based on context it is used
func (o *ListCronJobsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListCronJobsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListCronJobsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListCronJobsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
