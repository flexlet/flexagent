// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteCronJobHandlerFunc turns a function with the right signature into a delete cron job handler
type DeleteCronJobHandlerFunc func(DeleteCronJobParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCronJobHandlerFunc) Handle(params DeleteCronJobParams) middleware.Responder {
	return fn(params)
}

// DeleteCronJobHandler interface for that can handle valid delete cron job params
type DeleteCronJobHandler interface {
	Handle(DeleteCronJobParams) middleware.Responder
}

// NewDeleteCronJob creates a new http.Handler for the delete cron job operation
func NewDeleteCronJob(ctx *middleware.Context, handler DeleteCronJobHandler) *DeleteCronJob {
	return &DeleteCronJob{Context: ctx, Handler: handler}
}

/* DeleteCronJob swagger:route DELETE /cronjobs/{id} Cronjob deleteCronJob

Delete cronjob

*/
type DeleteCronJob struct {
	Context *middleware.Context
	Handler DeleteCronJobHandler
}

func (o *DeleteCronJob) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteCronJobParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteCronJobBadRequestBody delete cron job bad request body
//
// swagger:model DeleteCronJobBadRequestBody
type DeleteCronJobBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete cron job bad request body
func (o *DeleteCronJobBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCronJobBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete cron job bad request body based on context it is used
func (o *DeleteCronJobBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCronJobBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCronJobBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteCronJobBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteCronJobForbiddenBody delete cron job forbidden body
//
// swagger:model DeleteCronJobForbiddenBody
type DeleteCronJobForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete cron job forbidden body
func (o *DeleteCronJobForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCronJobForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete cron job forbidden body based on context it is used
func (o *DeleteCronJobForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCronJobForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCronJobForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteCronJobForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteCronJobNotFoundBody delete cron job not found body
//
// swagger:model DeleteCronJobNotFoundBody
type DeleteCronJobNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete cron job not found body
func (o *DeleteCronJobNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCronJobNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCronJobNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete cron job not found body based on context it is used
func (o *DeleteCronJobNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCronJobNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCronJobNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteCronJobNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
