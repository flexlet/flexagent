// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListParams creates a new ListParams object
//
// There are no default values defined in the spec.
func NewListParams() ListParams {

	return ListParams{}
}

// ListParams contains all the bound params for the list operation
// typically these are obtained from a http.Request
//
// swagger:parameters list
type ListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Operation
	  Pattern: ^[A-Za-z0-9\-_.]{1,32}$
	  In: query
	*/
	Operation *string
	/*Plugin
	  Pattern: ^[A-Za-z0-9\-_.]{1,32}$
	  In: query
	*/
	Plugin *string
	/*Start time range begin
	  In: query
	*/
	StartTimeBegin *int64
	/*Start time range end
	  In: query
	*/
	StartTimeEnd *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListParams() beforehand.
func (o *ListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qOperation, qhkOperation, _ := qs.GetOK("operation")
	if err := o.bindOperation(qOperation, qhkOperation, route.Formats); err != nil {
		res = append(res, err)
	}

	qPlugin, qhkPlugin, _ := qs.GetOK("plugin")
	if err := o.bindPlugin(qPlugin, qhkPlugin, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartTimeBegin, qhkStartTimeBegin, _ := qs.GetOK("startTimeBegin")
	if err := o.bindStartTimeBegin(qStartTimeBegin, qhkStartTimeBegin, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartTimeEnd, qhkStartTimeEnd, _ := qs.GetOK("startTimeEnd")
	if err := o.bindStartTimeEnd(qStartTimeEnd, qhkStartTimeEnd, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOperation binds and validates parameter Operation from query.
func (o *ListParams) bindOperation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Operation = &raw

	if err := o.validateOperation(formats); err != nil {
		return err
	}

	return nil
}

// validateOperation carries on validations for parameter Operation
func (o *ListParams) validateOperation(formats strfmt.Registry) error {

	if err := validate.Pattern("operation", "query", *o.Operation, `^[A-Za-z0-9\-_.]{1,32}$`); err != nil {
		return err
	}

	return nil
}

// bindPlugin binds and validates parameter Plugin from query.
func (o *ListParams) bindPlugin(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Plugin = &raw

	if err := o.validatePlugin(formats); err != nil {
		return err
	}

	return nil
}

// validatePlugin carries on validations for parameter Plugin
func (o *ListParams) validatePlugin(formats strfmt.Registry) error {

	if err := validate.Pattern("plugin", "query", *o.Plugin, `^[A-Za-z0-9\-_.]{1,32}$`); err != nil {
		return err
	}

	return nil
}

// bindStartTimeBegin binds and validates parameter StartTimeBegin from query.
func (o *ListParams) bindStartTimeBegin(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("startTimeBegin", "query", "int64", raw)
	}
	o.StartTimeBegin = &value

	return nil
}

// bindStartTimeEnd binds and validates parameter StartTimeEnd from query.
func (o *ListParams) bindStartTimeEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("startTimeEnd", "query", "int64", raw)
	}
	o.StartTimeEnd = &value

	return nil
}
