// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewKillParams creates a new KillParams object
// with the default values initialized.
func NewKillParams() KillParams {

	var (
		// initialize parameters with default values

		forceDefault = bool(false)
	)

	return KillParams{
		Force: &forceDefault,
	}
}

// KillParams contains all the bound params for the kill operation
// typically these are obtained from a http.Request
//
// swagger:parameters kill
type KillParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Force kill
	  In: query
	  Default: false
	*/
	Force *bool
	/*Job urn
	  Required: true
	  Pattern: ^[A-Za-z0-9\-._]{1,32}:jobs:[A-Za-z0-9\-._]{1,32}:[A-Za-z0-9\-]{36}$
	  In: path
	*/
	Urn string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewKillParams() beforehand.
func (o *KillParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qForce, qhkForce, _ := qs.GetOK("force")
	if err := o.bindForce(qForce, qhkForce, route.Formats); err != nil {
		res = append(res, err)
	}

	rUrn, rhkUrn, _ := route.Params.GetOK("urn")
	if err := o.bindUrn(rUrn, rhkUrn, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindForce binds and validates parameter Force from query.
func (o *KillParams) bindForce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewKillParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("force", "query", "bool", raw)
	}
	o.Force = &value

	return nil
}

// bindUrn binds and validates parameter Urn from path.
func (o *KillParams) bindUrn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Urn = raw

	if err := o.validateUrn(formats); err != nil {
		return err
	}

	return nil
}

// validateUrn carries on validations for parameter Urn
func (o *KillParams) validateUrn(formats strfmt.Registry) error {

	if err := validate.Pattern("urn", "path", o.Urn, `^[A-Za-z0-9\-._]{1,32}:jobs:[A-Za-z0-9\-._]{1,32}:[A-Za-z0-9\-]{36}$`); err != nil {
		return err
	}

	return nil
}
