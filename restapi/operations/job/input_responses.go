// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// InputOKCode is the HTTP code returned for type InputOK
const InputOKCode int = 200

/*InputOK Input job succeeded

swagger:response inputOK
*/
type InputOK struct {

	/*
	  In: Body
	*/
	Payload *models.Job `json:"body,omitempty"`
}

// NewInputOK creates InputOK with default headers values
func NewInputOK() *InputOK {

	return &InputOK{}
}

// WithPayload adds the payload to the input o k response
func (o *InputOK) WithPayload(payload *models.Job) *InputOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the input o k response
func (o *InputOK) SetPayload(payload *models.Job) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InputOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InputBadRequestCode is the HTTP code returned for type InputBadRequest
const InputBadRequestCode int = 400

/*InputBadRequest input bad request

swagger:response inputBadRequest
*/
type InputBadRequest struct {

	/*
	  In: Body
	*/
	Payload *InputBadRequestBody `json:"body,omitempty"`
}

// NewInputBadRequest creates InputBadRequest with default headers values
func NewInputBadRequest() *InputBadRequest {

	return &InputBadRequest{}
}

// WithPayload adds the payload to the input bad request response
func (o *InputBadRequest) WithPayload(payload *InputBadRequestBody) *InputBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the input bad request response
func (o *InputBadRequest) SetPayload(payload *InputBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InputBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InputUnauthorizedCode is the HTTP code returned for type InputUnauthorized
const InputUnauthorizedCode int = 401

/*InputUnauthorized input unauthorized

swagger:response inputUnauthorized
*/
type InputUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewInputUnauthorized creates InputUnauthorized with default headers values
func NewInputUnauthorized() *InputUnauthorized {

	return &InputUnauthorized{}
}

// WithPayload adds the payload to the input unauthorized response
func (o *InputUnauthorized) WithPayload(payload interface{}) *InputUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the input unauthorized response
func (o *InputUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InputUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// InputForbiddenCode is the HTTP code returned for type InputForbidden
const InputForbiddenCode int = 403

/*InputForbidden input forbidden

swagger:response inputForbidden
*/
type InputForbidden struct {

	/*
	  In: Body
	*/
	Payload *InputForbiddenBody `json:"body,omitempty"`
}

// NewInputForbidden creates InputForbidden with default headers values
func NewInputForbidden() *InputForbidden {

	return &InputForbidden{}
}

// WithPayload adds the payload to the input forbidden response
func (o *InputForbidden) WithPayload(payload *InputForbiddenBody) *InputForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the input forbidden response
func (o *InputForbidden) SetPayload(payload *InputForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InputForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InputNotFoundCode is the HTTP code returned for type InputNotFound
const InputNotFoundCode int = 404

/*InputNotFound input not found

swagger:response inputNotFound
*/
type InputNotFound struct {

	/*
	  In: Body
	*/
	Payload *InputNotFoundBody `json:"body,omitempty"`
}

// NewInputNotFound creates InputNotFound with default headers values
func NewInputNotFound() *InputNotFound {

	return &InputNotFound{}
}

// WithPayload adds the payload to the input not found response
func (o *InputNotFound) WithPayload(payload *InputNotFoundBody) *InputNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the input not found response
func (o *InputNotFound) SetPayload(payload *InputNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InputNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InputInternalServerErrorCode is the HTTP code returned for type InputInternalServerError
const InputInternalServerErrorCode int = 500

/*InputInternalServerError input internal server error

swagger:response inputInternalServerError
*/
type InputInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewInputInternalServerError creates InputInternalServerError with default headers values
func NewInputInternalServerError() *InputInternalServerError {

	return &InputInternalServerError{}
}

// WithPayload adds the payload to the input internal server error response
func (o *InputInternalServerError) WithPayload(payload interface{}) *InputInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the input internal server error response
func (o *InputInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InputInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
