// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// SubmitOKCode is the HTTP code returned for type SubmitOK
const SubmitOKCode int = 200

/*SubmitOK Submit job succeeded

swagger:response submitOK
*/
type SubmitOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Job `json:"body,omitempty"`
}

// NewSubmitOK creates SubmitOK with default headers values
func NewSubmitOK() *SubmitOK {

	return &SubmitOK{}
}

// WithPayload adds the payload to the submit o k response
func (o *SubmitOK) WithPayload(payload []*models.Job) *SubmitOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the submit o k response
func (o *SubmitOK) SetPayload(payload []*models.Job) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubmitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Job, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SubmitBadRequestCode is the HTTP code returned for type SubmitBadRequest
const SubmitBadRequestCode int = 400

/*SubmitBadRequest submit bad request

swagger:response submitBadRequest
*/
type SubmitBadRequest struct {

	/*
	  In: Body
	*/
	Payload *SubmitBadRequestBody `json:"body,omitempty"`
}

// NewSubmitBadRequest creates SubmitBadRequest with default headers values
func NewSubmitBadRequest() *SubmitBadRequest {

	return &SubmitBadRequest{}
}

// WithPayload adds the payload to the submit bad request response
func (o *SubmitBadRequest) WithPayload(payload *SubmitBadRequestBody) *SubmitBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the submit bad request response
func (o *SubmitBadRequest) SetPayload(payload *SubmitBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubmitBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubmitUnauthorizedCode is the HTTP code returned for type SubmitUnauthorized
const SubmitUnauthorizedCode int = 401

/*SubmitUnauthorized submit unauthorized

swagger:response submitUnauthorized
*/
type SubmitUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewSubmitUnauthorized creates SubmitUnauthorized with default headers values
func NewSubmitUnauthorized() *SubmitUnauthorized {

	return &SubmitUnauthorized{}
}

// WithPayload adds the payload to the submit unauthorized response
func (o *SubmitUnauthorized) WithPayload(payload interface{}) *SubmitUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the submit unauthorized response
func (o *SubmitUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubmitUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SubmitForbiddenCode is the HTTP code returned for type SubmitForbidden
const SubmitForbiddenCode int = 403

/*SubmitForbidden submit forbidden

swagger:response submitForbidden
*/
type SubmitForbidden struct {

	/*
	  In: Body
	*/
	Payload *SubmitForbiddenBody `json:"body,omitempty"`
}

// NewSubmitForbidden creates SubmitForbidden with default headers values
func NewSubmitForbidden() *SubmitForbidden {

	return &SubmitForbidden{}
}

// WithPayload adds the payload to the submit forbidden response
func (o *SubmitForbidden) WithPayload(payload *SubmitForbiddenBody) *SubmitForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the submit forbidden response
func (o *SubmitForbidden) SetPayload(payload *SubmitForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubmitForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubmitNotFoundCode is the HTTP code returned for type SubmitNotFound
const SubmitNotFoundCode int = 404

/*SubmitNotFound submit not found

swagger:response submitNotFound
*/
type SubmitNotFound struct {

	/*
	  In: Body
	*/
	Payload *SubmitNotFoundBody `json:"body,omitempty"`
}

// NewSubmitNotFound creates SubmitNotFound with default headers values
func NewSubmitNotFound() *SubmitNotFound {

	return &SubmitNotFound{}
}

// WithPayload adds the payload to the submit not found response
func (o *SubmitNotFound) WithPayload(payload *SubmitNotFoundBody) *SubmitNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the submit not found response
func (o *SubmitNotFound) SetPayload(payload *SubmitNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubmitNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubmitInternalServerErrorCode is the HTTP code returned for type SubmitInternalServerError
const SubmitInternalServerErrorCode int = 500

/*SubmitInternalServerError submit internal server error

swagger:response submitInternalServerError
*/
type SubmitInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewSubmitInternalServerError creates SubmitInternalServerError with default headers values
func NewSubmitInternalServerError() *SubmitInternalServerError {

	return &SubmitInternalServerError{}
}

// WithPayload adds the payload to the submit internal server error response
func (o *SubmitInternalServerError) WithPayload(payload interface{}) *SubmitInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the submit internal server error response
func (o *SubmitInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubmitInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
