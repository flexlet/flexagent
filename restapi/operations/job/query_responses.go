// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"flexagent/models"
)

// QueryOKCode is the HTTP code returned for type QueryOK
const QueryOKCode int = 200

/*QueryOK Query job succeeded

swagger:response queryOK
*/
type QueryOK struct {

	/*
	  In: Body
	*/
	Payload *models.Job `json:"body,omitempty"`
}

// NewQueryOK creates QueryOK with default headers values
func NewQueryOK() *QueryOK {

	return &QueryOK{}
}

// WithPayload adds the payload to the query o k response
func (o *QueryOK) WithPayload(payload *models.Job) *QueryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query o k response
func (o *QueryOK) SetPayload(payload *models.Job) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryBadRequestCode is the HTTP code returned for type QueryBadRequest
const QueryBadRequestCode int = 400

/*QueryBadRequest query bad request

swagger:response queryBadRequest
*/
type QueryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *QueryBadRequestBody `json:"body,omitempty"`
}

// NewQueryBadRequest creates QueryBadRequest with default headers values
func NewQueryBadRequest() *QueryBadRequest {

	return &QueryBadRequest{}
}

// WithPayload adds the payload to the query bad request response
func (o *QueryBadRequest) WithPayload(payload *QueryBadRequestBody) *QueryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query bad request response
func (o *QueryBadRequest) SetPayload(payload *QueryBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryUnauthorizedCode is the HTTP code returned for type QueryUnauthorized
const QueryUnauthorizedCode int = 401

/*QueryUnauthorized query unauthorized

swagger:response queryUnauthorized
*/
type QueryUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewQueryUnauthorized creates QueryUnauthorized with default headers values
func NewQueryUnauthorized() *QueryUnauthorized {

	return &QueryUnauthorized{}
}

// WithPayload adds the payload to the query unauthorized response
func (o *QueryUnauthorized) WithPayload(payload interface{}) *QueryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query unauthorized response
func (o *QueryUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// QueryForbiddenCode is the HTTP code returned for type QueryForbidden
const QueryForbiddenCode int = 403

/*QueryForbidden query forbidden

swagger:response queryForbidden
*/
type QueryForbidden struct {

	/*
	  In: Body
	*/
	Payload *QueryForbiddenBody `json:"body,omitempty"`
}

// NewQueryForbidden creates QueryForbidden with default headers values
func NewQueryForbidden() *QueryForbidden {

	return &QueryForbidden{}
}

// WithPayload adds the payload to the query forbidden response
func (o *QueryForbidden) WithPayload(payload *QueryForbiddenBody) *QueryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query forbidden response
func (o *QueryForbidden) SetPayload(payload *QueryForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryNotFoundCode is the HTTP code returned for type QueryNotFound
const QueryNotFoundCode int = 404

/*QueryNotFound query not found

swagger:response queryNotFound
*/
type QueryNotFound struct {

	/*
	  In: Body
	*/
	Payload *QueryNotFoundBody `json:"body,omitempty"`
}

// NewQueryNotFound creates QueryNotFound with default headers values
func NewQueryNotFound() *QueryNotFound {

	return &QueryNotFound{}
}

// WithPayload adds the payload to the query not found response
func (o *QueryNotFound) WithPayload(payload *QueryNotFoundBody) *QueryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query not found response
func (o *QueryNotFound) SetPayload(payload *QueryNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryInternalServerErrorCode is the HTTP code returned for type QueryInternalServerError
const QueryInternalServerErrorCode int = 500

/*QueryInternalServerError query internal server error

swagger:response queryInternalServerError
*/
type QueryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewQueryInternalServerError creates QueryInternalServerError with default headers values
func NewQueryInternalServerError() *QueryInternalServerError {

	return &QueryInternalServerError{}
}

// WithPayload adds the payload to the query internal server error response
func (o *QueryInternalServerError) WithPayload(payload interface{}) *QueryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query internal server error response
func (o *QueryInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
