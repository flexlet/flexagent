// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"flexagent/restapi/operations/agent"
	"flexagent/restapi/operations/cronjob"
	"flexagent/restapi/operations/crypto"
	"flexagent/restapi/operations/job"
)

// NewAgentAPI creates a new Agent instance
func NewAgentAPI(spec *loads.Document) *AgentAPI {
	return &AgentAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CryptoCreateVaultHandler: crypto.CreateVaultHandlerFunc(func(params crypto.CreateVaultParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.CreateVault has not yet been implemented")
		}),
		CryptoDecryptHandler: crypto.DecryptHandlerFunc(func(params crypto.DecryptParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.Decrypt has not yet been implemented")
		}),
		JobDeleteHandler: job.DeleteHandlerFunc(func(params job.DeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation job.Delete has not yet been implemented")
		}),
		CronjobDeleteCronJobHandler: cronjob.DeleteCronJobHandlerFunc(func(params cronjob.DeleteCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.DeleteCronJob has not yet been implemented")
		}),
		CryptoDeleteVaultHandler: crypto.DeleteVaultHandlerFunc(func(params crypto.DeleteVaultParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.DeleteVault has not yet been implemented")
		}),
		CryptoEncryptHandler: crypto.EncryptHandlerFunc(func(params crypto.EncryptParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.Encrypt has not yet been implemented")
		}),
		AgentHealthzHandler: agent.HealthzHandlerFunc(func(params agent.HealthzParams) middleware.Responder {
			return middleware.NotImplemented("operation agent.Healthz has not yet been implemented")
		}),
		JobInputHandler: job.InputHandlerFunc(func(params job.InputParams) middleware.Responder {
			return middleware.NotImplemented("operation job.Input has not yet been implemented")
		}),
		JobKillHandler: job.KillHandlerFunc(func(params job.KillParams) middleware.Responder {
			return middleware.NotImplemented("operation job.Kill has not yet been implemented")
		}),
		JobListHandler: job.ListHandlerFunc(func(params job.ListParams) middleware.Responder {
			return middleware.NotImplemented("operation job.List has not yet been implemented")
		}),
		CronjobListCronJobsHandler: cronjob.ListCronJobsHandlerFunc(func(params cronjob.ListCronJobsParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.ListCronJobs has not yet been implemented")
		}),
		CryptoListVaultsHandler: crypto.ListVaultsHandlerFunc(func(params crypto.ListVaultsParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.ListVaults has not yet been implemented")
		}),
		JobQueryHandler: job.QueryHandlerFunc(func(params job.QueryParams) middleware.Responder {
			return middleware.NotImplemented("operation job.Query has not yet been implemented")
		}),
		CronjobQueryCronJobHandler: cronjob.QueryCronJobHandlerFunc(func(params cronjob.QueryCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.QueryCronJob has not yet been implemented")
		}),
		CryptoQueryVaultHandler: crypto.QueryVaultHandlerFunc(func(params crypto.QueryVaultParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.QueryVault has not yet been implemented")
		}),
		AgentReadyzHandler: agent.ReadyzHandlerFunc(func(params agent.ReadyzParams) middleware.Responder {
			return middleware.NotImplemented("operation agent.Readyz has not yet been implemented")
		}),
		CryptoSecretDecryptHandler: crypto.SecretDecryptHandlerFunc(func(params crypto.SecretDecryptParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.SecretDecrypt has not yet been implemented")
		}),
		CryptoSecretEncryptHandler: crypto.SecretEncryptHandlerFunc(func(params crypto.SecretEncryptParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.SecretEncrypt has not yet been implemented")
		}),
		CronjobStartCronJobHandler: cronjob.StartCronJobHandlerFunc(func(params cronjob.StartCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.StartCronJob has not yet been implemented")
		}),
		CronjobStopCronJobHandler: cronjob.StopCronJobHandlerFunc(func(params cronjob.StopCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.StopCronJob has not yet been implemented")
		}),
		JobSubmitHandler: job.SubmitHandlerFunc(func(params job.SubmitParams) middleware.Responder {
			return middleware.NotImplemented("operation job.Submit has not yet been implemented")
		}),
		CronjobSubmitCronJobsHandler: cronjob.SubmitCronJobsHandlerFunc(func(params cronjob.SubmitCronJobsParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.SubmitCronJobs has not yet been implemented")
		}),
		CronjobUpdateCronJobHandler: cronjob.UpdateCronJobHandlerFunc(func(params cronjob.UpdateCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation cronjob.UpdateCronJob has not yet been implemented")
		}),
		CryptoUpdateVaultHandler: crypto.UpdateVaultHandlerFunc(func(params crypto.UpdateVaultParams) middleware.Responder {
			return middleware.NotImplemented("operation crypto.UpdateVault has not yet been implemented")
		}),
	}
}

/*AgentAPI Agent framwork to perform node operations
 */
type AgentAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// CryptoCreateVaultHandler sets the operation handler for the create vault operation
	CryptoCreateVaultHandler crypto.CreateVaultHandler
	// CryptoDecryptHandler sets the operation handler for the decrypt operation
	CryptoDecryptHandler crypto.DecryptHandler
	// JobDeleteHandler sets the operation handler for the delete operation
	JobDeleteHandler job.DeleteHandler
	// CronjobDeleteCronJobHandler sets the operation handler for the delete cron job operation
	CronjobDeleteCronJobHandler cronjob.DeleteCronJobHandler
	// CryptoDeleteVaultHandler sets the operation handler for the delete vault operation
	CryptoDeleteVaultHandler crypto.DeleteVaultHandler
	// CryptoEncryptHandler sets the operation handler for the encrypt operation
	CryptoEncryptHandler crypto.EncryptHandler
	// AgentHealthzHandler sets the operation handler for the healthz operation
	AgentHealthzHandler agent.HealthzHandler
	// JobInputHandler sets the operation handler for the input operation
	JobInputHandler job.InputHandler
	// JobKillHandler sets the operation handler for the kill operation
	JobKillHandler job.KillHandler
	// JobListHandler sets the operation handler for the list operation
	JobListHandler job.ListHandler
	// CronjobListCronJobsHandler sets the operation handler for the list cron jobs operation
	CronjobListCronJobsHandler cronjob.ListCronJobsHandler
	// CryptoListVaultsHandler sets the operation handler for the list vaults operation
	CryptoListVaultsHandler crypto.ListVaultsHandler
	// JobQueryHandler sets the operation handler for the query operation
	JobQueryHandler job.QueryHandler
	// CronjobQueryCronJobHandler sets the operation handler for the query cron job operation
	CronjobQueryCronJobHandler cronjob.QueryCronJobHandler
	// CryptoQueryVaultHandler sets the operation handler for the query vault operation
	CryptoQueryVaultHandler crypto.QueryVaultHandler
	// AgentReadyzHandler sets the operation handler for the readyz operation
	AgentReadyzHandler agent.ReadyzHandler
	// CryptoSecretDecryptHandler sets the operation handler for the secret decrypt operation
	CryptoSecretDecryptHandler crypto.SecretDecryptHandler
	// CryptoSecretEncryptHandler sets the operation handler for the secret encrypt operation
	CryptoSecretEncryptHandler crypto.SecretEncryptHandler
	// CronjobStartCronJobHandler sets the operation handler for the start cron job operation
	CronjobStartCronJobHandler cronjob.StartCronJobHandler
	// CronjobStopCronJobHandler sets the operation handler for the stop cron job operation
	CronjobStopCronJobHandler cronjob.StopCronJobHandler
	// JobSubmitHandler sets the operation handler for the submit operation
	JobSubmitHandler job.SubmitHandler
	// CronjobSubmitCronJobsHandler sets the operation handler for the submit cron jobs operation
	CronjobSubmitCronJobsHandler cronjob.SubmitCronJobsHandler
	// CronjobUpdateCronJobHandler sets the operation handler for the update cron job operation
	CronjobUpdateCronJobHandler cronjob.UpdateCronJobHandler
	// CryptoUpdateVaultHandler sets the operation handler for the update vault operation
	CryptoUpdateVaultHandler crypto.UpdateVaultHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *AgentAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *AgentAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *AgentAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AgentAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AgentAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AgentAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AgentAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AgentAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AgentAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AgentAPI
func (o *AgentAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CryptoCreateVaultHandler == nil {
		unregistered = append(unregistered, "crypto.CreateVaultHandler")
	}
	if o.CryptoDecryptHandler == nil {
		unregistered = append(unregistered, "crypto.DecryptHandler")
	}
	if o.JobDeleteHandler == nil {
		unregistered = append(unregistered, "job.DeleteHandler")
	}
	if o.CronjobDeleteCronJobHandler == nil {
		unregistered = append(unregistered, "cronjob.DeleteCronJobHandler")
	}
	if o.CryptoDeleteVaultHandler == nil {
		unregistered = append(unregistered, "crypto.DeleteVaultHandler")
	}
	if o.CryptoEncryptHandler == nil {
		unregistered = append(unregistered, "crypto.EncryptHandler")
	}
	if o.AgentHealthzHandler == nil {
		unregistered = append(unregistered, "agent.HealthzHandler")
	}
	if o.JobInputHandler == nil {
		unregistered = append(unregistered, "job.InputHandler")
	}
	if o.JobKillHandler == nil {
		unregistered = append(unregistered, "job.KillHandler")
	}
	if o.JobListHandler == nil {
		unregistered = append(unregistered, "job.ListHandler")
	}
	if o.CronjobListCronJobsHandler == nil {
		unregistered = append(unregistered, "cronjob.ListCronJobsHandler")
	}
	if o.CryptoListVaultsHandler == nil {
		unregistered = append(unregistered, "crypto.ListVaultsHandler")
	}
	if o.JobQueryHandler == nil {
		unregistered = append(unregistered, "job.QueryHandler")
	}
	if o.CronjobQueryCronJobHandler == nil {
		unregistered = append(unregistered, "cronjob.QueryCronJobHandler")
	}
	if o.CryptoQueryVaultHandler == nil {
		unregistered = append(unregistered, "crypto.QueryVaultHandler")
	}
	if o.AgentReadyzHandler == nil {
		unregistered = append(unregistered, "agent.ReadyzHandler")
	}
	if o.CryptoSecretDecryptHandler == nil {
		unregistered = append(unregistered, "crypto.SecretDecryptHandler")
	}
	if o.CryptoSecretEncryptHandler == nil {
		unregistered = append(unregistered, "crypto.SecretEncryptHandler")
	}
	if o.CronjobStartCronJobHandler == nil {
		unregistered = append(unregistered, "cronjob.StartCronJobHandler")
	}
	if o.CronjobStopCronJobHandler == nil {
		unregistered = append(unregistered, "cronjob.StopCronJobHandler")
	}
	if o.JobSubmitHandler == nil {
		unregistered = append(unregistered, "job.SubmitHandler")
	}
	if o.CronjobSubmitCronJobsHandler == nil {
		unregistered = append(unregistered, "cronjob.SubmitCronJobsHandler")
	}
	if o.CronjobUpdateCronJobHandler == nil {
		unregistered = append(unregistered, "cronjob.UpdateCronJobHandler")
	}
	if o.CryptoUpdateVaultHandler == nil {
		unregistered = append(unregistered, "crypto.UpdateVaultHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AgentAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AgentAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *AgentAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *AgentAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *AgentAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AgentAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the agent API
func (o *AgentAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AgentAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/crypto/vault/{name}"] = crypto.NewCreateVault(o.context, o.CryptoCreateVaultHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/crypto/decrypt"] = crypto.NewDecrypt(o.context, o.CryptoDecryptHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/jobs/{urn}"] = job.NewDelete(o.context, o.JobDeleteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cronjobs/{id}"] = cronjob.NewDeleteCronJob(o.context, o.CronjobDeleteCronJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/crypto/vault/{name}"] = crypto.NewDeleteVault(o.context, o.CryptoDeleteVaultHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/crypto/encrypt"] = crypto.NewEncrypt(o.context, o.CryptoEncryptHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/healthz"] = agent.NewHealthz(o.context, o.AgentHealthzHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/jobs/{urn}/input"] = job.NewInput(o.context, o.JobInputHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/jobs/{urn}/kill"] = job.NewKill(o.context, o.JobKillHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs"] = job.NewList(o.context, o.JobListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cronjobs"] = cronjob.NewListCronJobs(o.context, o.CronjobListCronJobsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/crypto/vaults"] = crypto.NewListVaults(o.context, o.CryptoListVaultsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/{urn}"] = job.NewQuery(o.context, o.JobQueryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cronjobs/{id}"] = cronjob.NewQueryCronJob(o.context, o.CronjobQueryCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/crypto/vault/{name}"] = crypto.NewQueryVault(o.context, o.CryptoQueryVaultHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/readyz"] = agent.NewReadyz(o.context, o.AgentReadyzHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/crypto/secret/decrypt"] = crypto.NewSecretDecrypt(o.context, o.CryptoSecretDecryptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/crypto/secret/encrypt"] = crypto.NewSecretEncrypt(o.context, o.CryptoSecretEncryptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cronjobs/{id}/start"] = cronjob.NewStartCronJob(o.context, o.CronjobStartCronJobHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cronjobs/{id}/stop"] = cronjob.NewStopCronJob(o.context, o.CronjobStopCronJobHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/jobs"] = job.NewSubmit(o.context, o.JobSubmitHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cronjobs"] = cronjob.NewSubmitCronJobs(o.context, o.CronjobSubmitCronJobsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cronjobs/{id}"] = cronjob.NewUpdateCronJob(o.context, o.CronjobUpdateCronJobHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/crypto/vault/{name}"] = crypto.NewUpdateVault(o.context, o.CryptoUpdateVaultHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AgentAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AgentAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AgentAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AgentAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *AgentAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
